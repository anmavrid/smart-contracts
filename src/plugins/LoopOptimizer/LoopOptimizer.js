/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Sep 20 2017 23:32:57 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q',
    'common/util/ejs',
    'scsrc/util/utils',
    'scsrc/templates/ejsCache',
    'scsrc/parsers/solidityExtra',
    'scsrc/parsers/solidityOptimized'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q,
    ejs,
    utils,
    ejsCache,
    solidityParser,
    optimizedParser) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of LoopOptimizer.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin LoopOptimizer.
     * @constructor
     */
    var LoopOptimizer = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    LoopOptimizer.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    LoopOptimizer.prototype = Object.create(PluginBase.prototype);
    LoopOptimizer.prototype.constructor = LoopOptimizer;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    LoopOptimizer.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodes;

        self.loadNodeMap(self.activeNode)
            .then(function (nodes_) {
                nodes = nodes_;
                return LoopOptimizer.prototype.getContractPaths.call(self, nodes);
            })
            .then(function (result) {
                console.log(result);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });
    };

    LoopOptimizer.prototype.getContractPaths = function (nodes) {
        var self = this,
            path,
            node,
            //Using an array for the multiple contracts extention
            contracts = [];

        for (path in nodes) {
            node = nodes[path];
            if (self.isMetaTypeOf(node, self.META.Contract)) {
                contracts.push(path);
            }
        }

        return LoopOptimizer.prototype.getContractFile.call(self, nodes[contracts[0]]);
    };

    LoopOptimizer.prototype.getContractFile = function (contractNode) {
        var self = this,
            fileContent,
            i;

        return utils.getModelOfContract(self.core, contractNode)
            .then(function (contractModel) {
                fileContent = ejs.render(ejsCache.contractType.complete, contractModel);

                var parseResult = optimizedParser.parse(fileContent.replace('InitialState,', 'InitialState'));
                
                return fileContent;
            });
    };

    LoopOptimizer.prototype.optimizeLoops = function (fileContent, parseResult) {
        var self = this;
        ///  Figure our loops in the code. 
        ///  Check if the state variables can be replaced 
             //// 3 cases: 
                //// Replace state variables in body
                //// Replace state variables in the loop condition
                //// Merge loops if they are fusible
        ///  Modify the code in the loop to add a temp variable
    };

    return LoopOptimizer;
});
